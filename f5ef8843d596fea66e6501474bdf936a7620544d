{
  "comments": [
    {
      "key": {
        "uuid": "5b5f8181_f8d5b12e",
        "filename": "encoding/jsonschema/constraints.go",
        "patchSetId": 10
      },
      "lineNbr": 147,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "q: does $id implies object type?",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 147,
        "endChar": 20
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ab045c07_520a7ad2",
        "filename": "encoding/jsonschema/constraints.go",
        "patchSetId": 10
      },
      "lineNbr": 147,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "Nope. The top-level schema can be any type.",
      "parentUuid": "5b5f8181_f8d5b12e",
      "range": {
        "startLine": 147,
        "startChar": 0,
        "endLine": 147,
        "endChar": 20
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "665fa428_286d158f",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 236,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "nit: consider using consistent ordering for the primitive type across all the file",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 236,
        "endChar": 11
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8dec4b87_e089756f",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 236,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "665fa428_286d158f",
      "range": {
        "startLine": 231,
        "startChar": 0,
        "endLine": 236,
        "endChar": 11
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b295eccf_1bc5b3ad",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 281,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "q: curious if we need to store `typ` as something separate as it could simply be considered as additional (and stronger) constraint of the list (and will always be the corresponding cue type for the index value).",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 281,
        "endChar": 21
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "eb65774c_b362fcee",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 281,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "The main reason to do this is to be able to elide it when there are other constraints. And this is the easiest way to do it without running a CUE evaluation.\n\nWe could arguably leave this up to CUE, but right now simplification is done in a later state, so this eliminates quite a bit of redundancy.\n\nOther than that, we could rely on the bitmask, but the disadvantage there is that we\u0027ll lose some line information.",
      "parentUuid": "b295eccf_1bc5b3ad",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 281,
        "endChar": 21
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "756b87dc_00ab6b44",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 281,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "q: do we still need the `usedTypes` bitmask then?",
      "parentUuid": "eb65774c_b362fcee",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 281,
        "endChar": 21
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b5d0384e_3582855d",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 281,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T17:54:38Z",
      "side": 1,
      "message": "Very good question. My first impression was no, and I tried to get rid of it. However, there are subtle difference. Most importantly, removing the bitmask made this change too big and there were too many moving parts to get this right.\n\nSeemed more important to fix these blatant conversion bugs in a sane manner.",
      "parentUuid": "756b87dc_00ab6b44",
      "range": {
        "startLine": 281,
        "startChar": 0,
        "endLine": 281,
        "endChar": 21
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9badf41b_0ee0f270",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 292,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "nit: maybe moving this to the caller: `(*state) add()` would make that clearer: we\u0027re only adding a constraint if it\u0027s not empty.",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 15
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f6f21c06_97b93cb8",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 292,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "This changes the semantics, though, as this method is called directly when adding to \"all\".",
      "parentUuid": "9badf41b_0ee0f270",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 15
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "836257c6_c88f17d7",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 292,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f6f21c06_97b93cb8",
      "range": {
        "startLine": 292,
        "startChar": 0,
        "endLine": 292,
        "endChar": 15
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0e94b7d0_b64da380",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 323,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "q: should there be something to enforce that only one entry is set? or do we want to record everything and leave that job to finalize()?",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 35
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e1aae066_7b1116d3",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 323,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "It is perfectly fine to set more than one entry. Allowing this is actually the main purpose of this change. Welcome to JSON schema semantics. ðŸ˜Š\n\nSee some of the tests.",
      "parentUuid": "0e94b7d0_b64da380",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 35
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1c050ee_1905424d",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 323,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e1aae066_7b1116d3",
      "range": {
        "startLine": 323,
        "startChar": 0,
        "endLine": 323,
        "endChar": 35
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8644bc5d_fe364b67",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 375,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "nit: what about using early return here, so that\u0027s easier to read:\n\n```\nif len(s.all.constraints) \u003e 0 {\n  return true\n}\n\nfor _, t : \u003d range s.types {\n  if len(t.constraints) \u003e 0 {\n     return true\n  }\n}\n\nreturn len(s.patterns) ...\n```",
      "range": {
        "startLine": 371,
        "startChar": 0,
        "endLine": 375,
        "endChar": 2
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d97d4b53_aaf543bc",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 375,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "Yep,much nicer. Changed.",
      "parentUuid": "8644bc5d_fe364b67",
      "range": {
        "startLine": 371,
        "startChar": 0,
        "endLine": 375,
        "endChar": 2
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f6664e01_d756928f",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 405,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "q: should that be moved a separate change (or documented in the commit message) ?",
      "range": {
        "startLine": 397,
        "startChar": 0,
        "endLine": 405,
        "endChar": 3
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c3089bad_1a4550d7",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 405,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "I\u0027ll keep it here. This actually minimizes the changes in this CL a bit as the new algorithm changed things. I\u0027ll update the comment.",
      "parentUuid": "f6664e01_d756928f",
      "range": {
        "startLine": 397,
        "startChar": 0,
        "endLine": 405,
        "endChar": 3
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b208364e_835785d3",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 405,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "c3089bad_1a4550d7",
      "range": {
        "startLine": 397,
        "startChar": 0,
        "endLine": 405,
        "endChar": 3
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "226ea128_219d6157",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 413,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "q: do we need to add one error per constraints?",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 413,
        "endChar": 34
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "88653662_41847644",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 413,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "Good question. I\u0027ve been pondering that too. The general feedback is that CUE should report all errors. So that is what I\u0027m going with here. We can change that if it turns out to be excessive.",
      "parentUuid": "226ea128_219d6157",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 413,
        "endChar": 34
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc1c788a_e7e9c80b",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 413,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "88653662_41847644",
      "range": {
        "startLine": 413,
        "startChar": 0,
        "endLine": 413,
        "endChar": 34
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5361ff40_dff6a1e3",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 422,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "q: shouldn\u0027t that be \u003d\u003d 0: ignore the constraint if the type is not used.",
      "range": {
        "startLine": 422,
        "startChar": 0,
        "endLine": 422,
        "endChar": 32
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5ed439ee_5099765b",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 422,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "Nope. If the type is used, it means the remaining constraints are implied, so we can drop them.",
      "parentUuid": "5361ff40_dff6a1e3",
      "range": {
        "startLine": 422,
        "startChar": 0,
        "endLine": 422,
        "endChar": 32
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3428471a_6c039746",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "q: wouldn\u0027t this effectively ignore the t.typ dijunction because of the else?",
      "range": {
        "startLine": 424,
        "startChar": 0,
        "endLine": 424,
        "endChar": 26
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6cef1f26_34b302b3",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "Not sure what \"this\" refers to here. But yes, this is deliberately ignored if the used mask checks triggers. It is also deliberately ignored if there are any constraints, as the types are implied from the constraints in CUE (unlike in JSON schema).",
      "parentUuid": "3428471a_6c039746",
      "range": {
        "startLine": 424,
        "startChar": 0,
        "endLine": 424,
        "endChar": 26
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b56b07fc_18a4509c",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "yes, but wouldn\u0027t that effectively means that any constraints implicitly wins over typ?\n\ni.e: if I have:\n```\n{\n   \"type\": \"string\",\n   \"maximum\": 5\n}\n```\nwouldn\u0027t that currently resolve to int?",
      "parentUuid": "6cef1f26_34b302b3",
      "range": {
        "startLine": 424,
        "startChar": 0,
        "endLine": 424,
        "endChar": 26
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2d062cee_acbac20a",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 424,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T17:54:38Z",
      "side": 1,
      "message": "No, that\u0027s why the constraints and types are grouped by type (note the array). \n\nSo type:string here is collated in the string bucket, while \"maximum:5\" is collated in the number bucket.",
      "parentUuid": "b56b07fc_18a4509c",
      "range": {
        "startLine": 424,
        "startChar": 0,
        "endLine": 424,
        "endChar": 26
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c97826db_6645ea1e",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 433,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "q: what is the difference with the earlier `s.usedTypes` check?",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 26
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "568bcb3c_acff4812",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 433,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T17:54:38Z",
      "side": 1,
      "message": "Used means that the type implied somewhere (e.g. by a constraint or in the \"all\" bucket). \"types\" means that this type should be represented (and if it hasn\u0027t yet up till now, it needs an explicit type).\n\nPart of the complication comes from having a duplicate system now. But the main benefit is that it keep the diff understandable and smallish. Ideally the use of \"used\" should go in follow-up CLs.",
      "parentUuid": "c97826db_6645ea1e",
      "range": {
        "startLine": 433,
        "startChar": 0,
        "endLine": 433,
        "endChar": 26
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e4cf31c7_b9adc98d",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 445,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T09:41:05Z",
      "side": 1,
      "message": "q: shouldn\u0027t we also consider the objectType.constraints here? (not clear what the local obj is for, as it doesn\u0027t seems to be used later in the function)",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 51
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d4bc2f5c_9adb539a",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 445,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T10:09:39Z",
      "side": 1,
      "message": "Nope. The constraints are either not structs (e.g. calls like struct.MinProperties) or structs that _have to be_ by themselves.\n\nTheoretically, we could introduce a new struct here. But using the one of s.typ results in nicer output.",
      "parentUuid": "e4cf31c7_b9adc98d",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 51
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9644dd4c_55e0ed3f",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 445,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "I simply wasn\u0027t clear how obj (or s.obj) was getting used after finalize().\n\nAdditional since `(*state) object()` nows initialize both `s.obj` and `s.types[objectType].typ`  (thru `(*state) add()`) would there a case when `s.obj \u003d\u003d null` and `s.types[objectType].type` isn\u0027t ?",
      "parentUuid": "d4bc2f5c_9adb539a",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 51
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4ddefa11_78151380",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 445,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T17:54:38Z",
      "side": 1,
      "message": "There is one case where this is possible, yes.",
      "parentUuid": "9644dd4c_55e0ed3f",
      "range": {
        "startLine": 445,
        "startChar": 0,
        "endLine": 445,
        "endChar": 51
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "79900100_ab4b04b9",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 469,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-15T13:08:54Z",
      "side": 1,
      "message": "offtopic q: wouldn\u0027t that effectively skip definitions/linkReferences?",
      "range": {
        "startLine": 469,
        "startChar": 0,
        "endLine": 469,
        "endChar": 12
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "403553db_6c999d3a",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 10
      },
      "lineNbr": 469,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-15T17:54:38Z",
      "side": 1,
      "message": "This is the case `[...X] | *[]`, which is redundant in CUE as the latter is implied by the former.\n\nWe should probably remove this and let CUE deal with it, but probably not in this CL.",
      "parentUuid": "79900100_ab4b04b9",
      "range": {
        "startLine": 469,
        "startChar": 0,
        "endLine": 469,
        "endChar": 12
      },
      "revId": "f5ef8843d596fea66e6501474bdf936a7620544d",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    }
  ]
}