-- kube1.cue --
package kube

deployment: [ID=_]: {
	apiVersion: "apps/v1"
	kind:       "Deployment"
	metadata: name: ID
	spec: {
		// 1 is the default, but we allow any number
		replicas: *1 | int
		template: {
			metadata: labels: {
				app:       ID
				domain:    "prod"
				component: #Component
			}
			// we always have one namesake container
			spec: containers: [{name: ID}]
		}
	}
}

#Component: string

deployment: [ID=_]: _spec & {
	apiVersion: "apps/v1"
	kind:       "Deployment"
	_name:      ID
	spec: replicas: *1 | int
}

configMap: [ID=_]: {
	metadata: name: ID
	metadata: labels: component: #Component
}

_spec: {
	_name: string

	metadata: name: _name
	metadata: labels: component: #Component
	spec: selector: {}
	spec: template: {
		metadata: labels: {
			app:       _name
			component: #Component
			domain:    "prod"
		}
		spec: containers: [{name: _name}]
	}
}

// Define the _export option and set the default to true
// for all ports defined in all containers.
_spec: spec: template: spec: containers: [...{
	ports: [...{
		_export: *true | false // include the port in the service
	}]
}]

for k, v in deployment {
	service: "\(k)": {
		spec: selector: v.spec.template.metadata.labels

		spec: ports: [
			for c in v.spec.template.spec.containers
			for p in c.ports
			if p._export {
				let Port = p.containerPort // Port is an alias
				port:       *Port | int
				targetPort: *Port | int
			},
		]
	}
}

-- kube2.cue --
package kube

#Component: "frontend"

deployment: [string]: spec: template: {
	metadata: annotations: {
		"prometheus.io.scrape": "true"
		"prometheus.io.port":   "\(spec.containers[0].ports[0].containerPort)"
	}
	spec: containers: [{
		ports: [{containerPort: *7080 | int}] // 7080 is the default
	}]
}


-- kube3.cue --
package kube

service: bartender: {
	apiVersion: "v1"
	kind:       "Service"
	metadata: {
		name: "bartender"
		labels: {
			component: "frontend"
			app:       "bartender"
			domain:    "prod"
		}
	}
	spec: {
		ports: [{
			port:       7080
			targetPort: 7080
			protocol:   "TCP"
			name:       "client"
		}]
		selector: {
			component: "frontend"
			app:       "bartender"
			domain:    "prod"
		}
	}
}
deployment: bartender: {
	apiVersion: "apps/v1"
	kind:       "Deployment"
	metadata: name: "bartender"
	spec: {
		replicas: 1
		template: {
			metadata: {
				labels: {
					component: "frontend"
					app:       "bartender"
					domain:    "prod"
				}
				annotations: {
					"prometheus.io.scrape": "true"
					"prometheus.io.port":   "7080"
				}
			}
			spec: containers: [{
				name:  "bartender"
				image: "gcr.io/myproj/bartender:v0.1.34"
				ports: [{
					containerPort: 7080
				}]
				args: [
				]
			}]
		}
	}
}

-- out/trim --
== kube1.cue
package kube

deployment: [ID=_]: {
	apiVersion: "apps/v1"
	kind:       "Deployment"
	metadata: name: ID
	spec: {
		// 1 is the default, but we allow any number
		replicas: *1 | int
		template: {
			metadata: labels: {
				app:       ID
				domain:    "prod"
				component: #Component
			}
			// we always have one namesake container
			spec: containers: [{name: ID}]
		}
	}
}

#Component: string

deployment: [ID=_]: _spec & {
	apiVersion: "apps/v1"
	kind:       "Deployment"
	_name:      ID
	spec: replicas: *1 | int
}

configMap: [ID=_]: {
	metadata: name: ID
	metadata: labels: component: #Component
}

_spec: {
	_name: string

	metadata: name: _name
	metadata: labels: component: #Component
	spec: selector: {}
	spec: template: {
		metadata: labels: {
			app:       _name
			component: #Component
			domain:    "prod"
		}
		spec: containers: [{name: _name}]
	}
}

// Define the _export option and set the default to true
// for all ports defined in all containers.
_spec: spec: template: spec: containers: [...{
	ports: [...{
		_export: *true | false // include the port in the service
	}]
}]

for k, v in deployment {
	service: "\(k)": {
		spec: selector: v.spec.template.metadata.labels

		spec: ports: [
			for c in v.spec.template.spec.containers
			for p in c.ports
			if p._export {
				let Port = p.containerPort // Port is an alias
				port:       *Port | int
				targetPort: *Port | int
			},
		]
	}
}
== kube2.cue
package kube

#Component: "frontend"

deployment: [string]: spec: template: {
	metadata: annotations: {
		"prometheus.io.scrape": "true"
		"prometheus.io.port":   "\(spec.containers[0].ports[0].containerPort)"
	}
	spec: containers: [{
		ports: [{containerPort: *7080 | int}] // 7080 is the default
	}]
}
== kube3.cue
package kube

service: bartender: {
	apiVersion: "v1"
	kind:       "Service"
	metadata: {
		name: "bartender"
		labels: {
			component: "frontend"
			app:       "bartender"
			domain:    "prod"
		}
	}
	spec: {
		ports: [{
			protocol: "TCP"
			name:     "client"
		}]
	}
}
deployment: bartender: {
	spec: {
		template: {
			spec: containers: [{
				image: "gcr.io/myproj/bartender:v0.1.34"
				args: [
				]
			}]
		}
	}
}
