{
  "comments": [
    {
      "key": {
        "uuid": "8645419c_36408ddc",
        "filename": "cmd/cue/cmd/testdata/script/def_jsonschema.txt",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-13T02:54:29Z",
      "side": 1,
      "message": "q: curious why uint doesn\u0027t show up here.",
      "range": {
        "startLine": 71,
        "startChar": 78,
        "endLine": 71,
        "endChar": 81
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e047351b_2dcebfd5",
        "filename": "cmd/cue/cmd/testdata/script/def_jsonschema.txt",
        "patchSetId": 1
      },
      "lineNbr": 71,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-13T13:40:59Z",
      "side": 1,
      "message": "Most likely it is because the optimization that rewrites int \u0026 \u003e\u003d0 to uint happens at a later point that at which this error is generated.",
      "parentUuid": "8645419c_36408ddc",
      "range": {
        "startLine": 71,
        "startChar": 78,
        "endLine": 71,
        "endChar": 81
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b964f293_cfb078c6",
        "filename": "cmd/cue/cmd/testdata/script/import_auto.txt",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-13T02:54:29Z",
      "side": 1,
      "message": "q: shouldn\u0027t that be uint?",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 13
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8f45ee4d_14bed546",
        "filename": "cmd/cue/cmd/testdata/script/import_auto.txt",
        "patchSetId": 1
      },
      "lineNbr": 16,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-13T13:40:59Z",
      "side": 1,
      "message": "It could be yes, although this is correct. The code that does the normalizations, or all evaluation for that matter, is going to be completely replaced with the new evaluator. So at this point it makes no sense to make fixes in this code.\n\nNote that these rewrites are a property of CUE, not the jsonschema code.",
      "parentUuid": "b964f293_cfb078c6",
      "range": {
        "startLine": 16,
        "startChar": 4,
        "endLine": 16,
        "endChar": 13
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1cf70b07_2737c81e",
        "filename": "encoding/jsonschema/constraints.go",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-13T02:54:29Z",
      "side": 1,
      "message": "q: curious why we don\u0027t have this for the other types?",
      "range": {
        "startLine": 178,
        "startChar": 0,
        "endLine": 178,
        "endChar": 22
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8fed8cb8_74e7b7ef",
        "filename": "encoding/jsonschema/constraints.go",
        "patchSetId": 1
      },
      "lineNbr": 178,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-13T13:40:59Z",
      "side": 1,
      "message": "number is the only type that is represented with two type bits. You could argue that `int` should be a constraint in `cue` and is not a type by itself.\n\nA constraint like \u003c0 implies a number, not an integer. In fact, there are no constraints that imply `int`. So for integers and a maximum constraint, one has to write `int \u0026 \u003c5`, but for number and a bound constraint `\u003c5` is sufficient as it already implies number.",
      "parentUuid": "1cf70b07_2737c81e",
      "range": {
        "startLine": 178,
        "startChar": 0,
        "endLine": 178,
        "endChar": 22
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "40598b98_aad9558f",
        "filename": "encoding/jsonschema/constraints.go",
        "patchSetId": 1
      },
      "lineNbr": 420,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-13T02:54:29Z",
      "side": 1,
      "message": "q: should we test for \"type\" here and change to uint if that\u0027s \u003e\u003d 0?",
      "range": {
        "startLine": 416,
        "startChar": 0,
        "endLine": 420,
        "endChar": 4
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aebf0027_dd487dbc",
        "filename": "encoding/jsonschema/constraints.go",
        "patchSetId": 1
      },
      "lineNbr": 420,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-13T13:40:59Z",
      "side": 1,
      "message": "No, these kind of optimizations should be done in CUE in a more general setting. There are tons of rewrites CUE does. That is one of the appeals of using CUE for these kind of things.\n\nAside from that, using `int` here is slightly nicer. `int` is a native type constraint, whereas `uint` is just an alias for `int \u0026 \u003e\u003d0`. IOW, one will just lose line number information by swapping in uint here, and the first thing CUE does is replace it with `int \u0026 \u003e\u003d0` again during evaluation.",
      "parentUuid": "40598b98_aad9558f",
      "range": {
        "startLine": 416,
        "startChar": 0,
        "endLine": 420,
        "endChar": 4
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b480aede_c6f88238",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-13T02:54:29Z",
      "side": 1,
      "message": "q: curious why we need a dedicated flag? isn\u0027t this already covered by \"types\" mask?",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 245,
        "endChar": 24
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "97ed5a30_b6749ac0",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 1
      },
      "lineNbr": 245,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-06-13T13:40:59Z",
      "side": 1,
      "message": "That is what I hoped indeed, but `int` is different. See my previous comment.\n\nNote also that the typemask code below is used to compute necessary disjunction, while int, in this case, is used as a conjunction to other constraints.",
      "parentUuid": "b480aede_c6f88238",
      "range": {
        "startLine": 245,
        "startChar": 0,
        "endLine": 245,
        "endChar": 24
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dd6683e8_c3bc05c7",
        "filename": "encoding/jsonschema/decode.go",
        "patchSetId": 1
      },
      "lineNbr": 333,
      "author": {
        "id": 1000077
      },
      "writtenOn": "2020-06-13T02:54:29Z",
      "side": 1,
      "message": "q: do we still need this? or is that already handled by \"s.isInt !\u003d nil \u0026\u0026 types\u0026cue.IntKind \u003d\u003d 0\" check ahead?",
      "range": {
        "startLine": 332,
        "startChar": 0,
        "endLine": 333,
        "endChar": 27
      },
      "revId": "2a66f408750d35870441cff4ca97a9f1ae6fb9af",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    }
  ]
}