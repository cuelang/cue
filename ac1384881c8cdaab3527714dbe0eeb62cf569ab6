{
  "comments": [
    {
      "key": {
        "uuid": "615f4d63_8ac1392c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000058
      },
      "writtenOn": "2020-10-02T15:25:33Z",
      "side": 1,
      "message": "LGTM after a quick scan... Just to caveat I\u0027m not massively familiar with the decisions behind the strconv API.",
      "revId": "ac1384881c8cdaab3527714dbe0eeb62cf569ab6",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2fd55512_0bd3303b",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-02T16:22:41Z",
      "side": 1,
      "message": "One difference with the strconv API is that there is really only one kind of string in Go.\n\nIn CUE we have\n- bytes versus strings\n- multiline vs single line\n- escape-sequence modifiers (#\"foo\\n\\#nbar\"#)\n\nThen for each of these we need\n- Quote\n- Append\n- Escape\n- Full vs ASCII vs Graphic (like strconv)\n\nThe issue is that given these dimensions, creating an API along the strconv lines will blow things up. While strconv only has 3 dimensions, roughly, to care about, we have 3 * 2 * 2 * 2 \u003d 24. This may get even worse if we also want to allow specific optimizations for labels or \"auto\" strings that pick single or multiline based on the content.\n\nThis is why I had to go for a different approach.",
      "parentUuid": "615f4d63_8ac1392c",
      "revId": "ac1384881c8cdaab3527714dbe0eeb62cf569ab6",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7525670_a0109591",
        "filename": "cue/literal/quote.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000058
      },
      "writtenOn": "2020-10-02T15:25:33Z",
      "side": 1,
      "message": "This wording is potentially misleading in that it could require s to be quoted, rather than saying that it will quote s and append it to buf. Maybe follow the strconv documentation \"style\" here?\n\n\u003e Append appends a CUE string literal representing s, as generated by Quote, to buf and returns the extended buffer",
      "revId": "ac1384881c8cdaab3527714dbe0eeb62cf569ab6",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7c407fcf_392f65c5",
        "filename": "cue/literal/quote.go",
        "patchSetId": 2
      },
      "lineNbr": 116,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-02T16:22:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b7525670_a0109591",
      "revId": "ac1384881c8cdaab3527714dbe0eeb62cf569ab6",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0bc88e88_b395dd4e",
        "filename": "cue/literal/quote.go",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000058
      },
      "writtenOn": "2020-10-02T15:25:33Z",
      "side": 1,
      "message": "Ditto.",
      "revId": "ac1384881c8cdaab3527714dbe0eeb62cf569ab6",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c2e8aba_8d05f950",
        "filename": "cue/literal/quote.go",
        "patchSetId": 2
      },
      "lineNbr": 157,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2020-10-02T16:22:41Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "0bc88e88_b395dd4e",
      "revId": "ac1384881c8cdaab3527714dbe0eeb62cf569ab6",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    }
  ]
}