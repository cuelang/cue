package main

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"path/filepath"
	"text/template"
)

const baseDir = "cmd/cue/cmd"

const genFile = "interfaces.go"

const genTmpl = `// Code generated by go generate. DO NOT EDIT.

// go:generate rm {{ .baseDir }}/gen/gen.go
// go:generate go run {{ .baseDir }}/gen/gen.go

package cmd

var interfaceFilesOverlay = map[string][]byte {
{{- range $fn, $content := .interfaceFiles }}
	"cuelang.org/interfaces/{{ $fn }}": {{ printf "%#v" $content }},
{{- end }}
}
`

var interfaceFiles = []string{
	"go.mod",
	"text.go",
	"top.go",
}

func main() {
	// read interface files
	files := map[string][]byte{}
	for _, fn := range interfaceFiles {
		content, err := ioutil.ReadFile(filepath.Join(baseDir, "interfaces", fn))
		if err != nil {
			fmt.Println("Error:", err)
			return
		}
		files[fn] = content
	}

	// parse template
	tmpl, err := template.New("interfaces.go").Parse(genTmpl)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// setup template data
	data := map[string]interface{}{
		"baseDir":        baseDir,
		"interfaceFiles": files,
	}

	// generate content
	var b bytes.Buffer
	err = tmpl.Execute(&b, data)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}

	// write file
	err = ioutil.WriteFile(filepath.Join(baseDir, genFile), b.Bytes(), 0644)
	if err != nil {
		fmt.Println("Error:", err)
		return
	}
}
