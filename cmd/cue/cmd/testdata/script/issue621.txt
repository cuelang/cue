exec ls -lh vendor/cuelang.org/intstr
env GOPROXY=off GOSUMDB=off GO111MODULE=on
cue get go cuelang.org/intstr
exec cat cue.mod/gen/cuelang.org/intstr/intstr_go_gen.cue
cmp stdout expected-output

-- expected-output --
// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go cuelang.org/intstr

package intstr

// IntOrString is a type that can hold an int32 or a string.  When used in
// JSON or YAML marshalling and unmarshalling, it produces or consumes the
// inner type.  This allows you to have, for example, a JSON field that can
// accept a name or number.
// TODO: Rename to Int32OrString
//
// +protobuf=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
// +k8s:openapi-gen=true
#IntOrString: _

// Type represents the stored type of IntOrString.
#Type: int64 // #enumType

#enumType:
	#Int |
	#String

#Int:    #Type & 0
#String: #Type & 1
-- repro.go --
package repro
import (
        "cuelang.org/intstr"
)
_ = intstr.IntOrString

-- cue.mod/module.cue --
module: "cuelang.org/repro"

-- go.mod --
module cuelang.org/repro

-- vendor/cuelang.org/intstr/go.mod --
module cuelang.org/intstr

-- vendor/cuelang.org/intstr/intstr.go --
/*
Copyright 2014 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package intstr

import (
        "encoding/json"
        "fmt"
)

// IntOrString is a type that can hold an int32 or a string.  When used in
// JSON or YAML marshalling and unmarshalling, it produces or consumes the
// inner type.  This allows you to have, for example, a JSON field that can
// accept a name or number.
// TODO: Rename to Int32OrString
//
// +protobuf=true
// +protobuf.options.(gogoproto.goproto_stringer)=false
// +k8s:openapi-gen=true
type IntOrString struct {
        Type   Type   `protobuf:"varint,1,opt,name=type,casttype=Type"`
        IntVal int32  `protobuf:"varint,2,opt,name=intVal"`
        StrVal string `protobuf:"bytes,3,opt,name=strVal"`
}

// Type represents the stored type of IntOrString.
type Type int64

const (
        Int    Type = iota // The IntOrString holds an int.
        String             // The IntOrString holds a string.
)

// UnmarshalJSON implements the json.Unmarshaller interface.
func (intstr *IntOrString) UnmarshalJSON(value []byte) error {
        if value[0] == '"' {
                intstr.Type = String
                return json.Unmarshal(value, &intstr.StrVal)
        }
        intstr.Type = Int
        return json.Unmarshal(value, &intstr.IntVal)
}

// MarshalJSON implements the json.Marshaller interface.
func (intstr IntOrString) MarshalJSON() ([]byte, error) {
        switch intstr.Type {
        case Int:
                return json.Marshal(intstr.IntVal)
        case String:
                return json.Marshal(intstr.StrVal)
        default:
                return []byte{}, fmt.Errorf("impossible IntOrString.Type")
        }
}
