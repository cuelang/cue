#name: conjunction of optional sets
#evalFull
-- in.cue --
A :: {
	[=~"^[a-s]*$"]: int
}
B :: {
	[=~"^[m-z]*$"]: int
}

C :: A & B
c:   C & {aaa: 3}

D :: {A & B}
d: D & {aaa: 3}
-- out/def --
A :: {
	[=~"^[a-s]*$"]: int
}
B :: {
	[=~"^[m-z]*$"]: int
}
C :: A & B
c:   _|_ // field "aaa" not allowed in closed struct
D :: {
	A & B
}
d: _|_ // field "aaa" not allowed in closed struct
-- out/legacy-debug --
<0>{A :: <1>C{[=~"^[a-s]*$"]: <2>(_: string)->int, }, B :: <3>C{[=~"^[m-z]*$"]: <4>(_: string)->int, }, C :: <5>C{(C{[=~"^[a-s]*$"]: <6>(_: string)->int} & C{[=~"^[m-z]*$"]: <7>(_: string)->int}), }, c: _|_(3:field "aaa" not allowed in closed struct), D :: <8>C{(C{[=~"^[a-s]*$"]: <9>(_: string)->int} & C{[=~"^[m-z]*$"]: <10>(_: string)->int}), }, d: _|_(3:field "aaa" not allowed in closed struct)}
