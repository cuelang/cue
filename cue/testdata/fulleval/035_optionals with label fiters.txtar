#name: optionals with label fiters
#evalFull
-- in.cue --
JobID :: =~"^[a-zA-Z]*$"
Job :: {
	name: string
	cmd:  string
}
Jobs :: {
	[JobID]: Job
	[=~"Test$"]: name: =~"^test" // Must work without ...
}

jobs: foo: name: "allGood"
jobs: foo: name: "allGood"

jobs1:          Jobs
jobs1: foo1: {} // faulty

jobs2: Jobs
jobs2: fooTest: name: "badName" // faulty

jobs3: Jobs
jobs3: [string]: Job
jobs3: fooTest1: name: "badName" // faulty
-- out/def --
JobID :: =~"^[a-zA-Z]*$"
Job :: {
	name: string
	cmd:  string
}
Jobs :: {
	{[JobID]: Job}
	{[=~"Test$"]: {
		name: =~"^test"
	}}
}
jobs: {
	foo: {
		name: "allGood"
	}
}
jobs1: _|_ // field "foo1" not allowed in closed struct
jobs2: Jobs & {
	fooTest: {
		name: "badName"
	}
}
jobs3: _|_ // field "fooTest1" not allowed in closed struct
-- out/legacy-debug --
<0>{JobID :: =~"^[a-zA-Z]*$", Job :: <1>C{name: string, cmd: string}, Jobs :: <2>C{[=~"^[a-zA-Z]*$"]: <3>(_: string)-><4>.Job, [=~"Test$"]: <5>(_: string)-><6>C{name: =~"^test"}, }, jobs: <7>{foo: <8>{name: "allGood"}}, jobs1: _|_(<9>{}:field "foo1" not allowed in closed struct), jobs2: <10>C{[=~"^[a-zA-Z]*$"]: <11>(_: string)-><4>.Job, [=~"Test$"]: <12>(_: string)-><13>C{name: =~"^test"}, fooTest: _|_(string:field "cmd" not allowed in closed struct)}, jobs3: _|_(<14>{name: "badName"}:field "fooTest1" not allowed in closed struct)}
