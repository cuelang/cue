#name: excluded embedding from closing
#evalPartial
-- in.cue --
S :: {
	a: {c: int}
	{
		c: {d: int}
	}
	B = {open: int}
	b: B
}
V: S & {
	c: e:     int
	b: extra: int
}
-- out/def --
S :: {
	a: {
		c: int
	}
	c: {
		d: int
		...
	}
	b: {
		open: int
		...
	}
}
V: S & {
	c: {
		e: int
	}
	b: {
		extra: int
	}
}
-- out/legacy-debug --
<0>{S :: <1>C{a: <2>C{c: int}, c: <3>{d: int}, b: <4>{open: int}}, V: <5>C{a: <6>C{c: int}, c: <7>{d: int, e: int}, b: <8>{open: int, extra: int}}}
