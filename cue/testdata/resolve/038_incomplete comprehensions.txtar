#name: incomplete comprehensions
#evalPartial
-- in.cue --
A: {
	for v in src {
		"\(v)": v
	}
	src: _
	if true {
		baz: "baz"
	}
}
B: A & {
	src: ["foo", "bar"]
}
-- out/def --
A: {
	src: _
	baz: "baz"
	for v in src {
		"\(v)": v
	}
}
B: A & {
	src: ["foo", "bar"]
}
-- out/legacy-debug --
<0>{A: <1>{src: _, baz: "baz" <2>for _, v in <3>.src yield <4>{""+<2>.v+"": <2>.v}}, B: <5>{src: ["foo","bar"], baz: "baz", foo: "foo", bar: "bar"}}
