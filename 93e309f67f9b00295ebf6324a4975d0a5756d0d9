{
  "comments": [
    {
      "key": {
        "uuid": "ff68418b_18963640",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 46,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "definition",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "32169903_30228843",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 1041,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "s/to apply/that apply/ ?",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c8b12c0_afef98d3",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 1042,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "It might be worth saying _how_ these contraints can be defined at this point.",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e6151669_ec858c17",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 1045,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "This doesn\u0027t seem to indicate how this is different from a regular field constraint - that is, it seems to be defining what an \"optional field\" is, but then doesn\u0027t actually describe what it is in other words, which I think is worth doing.",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8a269298_29dbdb4a",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 1050,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "a/declares/declare/",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2186319b_05a353b0",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 1052,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "this reads as a bit of a mouthful. How about something like:\n\nAdditionally, a _pattern constraint_, denoted `[pattern]: constraint`, declares\na constraint that applies to any field with a name that unifies with the expression\n`pattern` unless that name has been explicitly defined in the same struct as a regular or optional\nfield.\n\n?\n\nI think an example would go down well at this point too. And perhaps also point out somehow that this only applies to the exact lexical struct and not to other structs that it\u0027s unified with, as I think would be easy to make that mistake when reading this.",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fa4b1898_0d0c6c3c",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 1058,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "Again, I\u0027d be tempted to include an example or two to make the rule clearer here.",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60e66be9_1738579e",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 1222,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "Maybe reference here the section that defines the semantics of `...` ?",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a3527537_5cc0cb0d",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 1224,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "The semantics of \"recursively\" aren\u0027t clear to me here. Does this apply to lexically enclosed structs, or to everything unified with the struct or... ? Maybe worth clarifying how the recursion works.",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "180d1b11_aabbc1c7",
        "filename": "doc/ref/spec.md",
        "patchSetId": 2
      },
      "lineNbr": 2852,
      "author": {
        "id": 1000055
      },
      "writtenOn": "2020-06-05T15:41:28Z",
      "side": 1,
      "message": "Yay! :)",
      "revId": "93e309f67f9b00295ebf6324a4975d0a5756d0d9",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    }
  ]
}