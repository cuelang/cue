{
  "comments": [
    {
      "key": {
        "uuid": "c4ac33b3_244db263",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "I have toyed with the idea of just calling it keywords, as pretty much all keywords are to some extent pseudo-keywords in CUE anyway (they can all be used as labels, for instance).",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cda77276_6e3eec1c",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 228,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Works for me.",
      "parentUuid": "c4ac33b3_244db263",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2c12d8a2_99bae463",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "When",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "717ec8bd_1c191f45",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 289,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "2c12d8a2_99bae463",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6988a5a1_bc586eb7",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 302,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "I\u0027m using the official SI standard, where \"K\" is not a valid multiplier.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ba6577c7_8adecc53",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 302,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Okay, but how many users will know that vs. be annoyed that they can\u0027t write 10K?\n\nIs it because K is Kelvin? That\u0027s not a confounding factor in this application.",
      "parentUuid": "6988a5a1_bc586eb7",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "15705110_54a0578a",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 302,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "Not sure why. I think it is just historical, because kilo is traditionally written as k. All \"small\" amounts are small caps and large amounts large caps, where the cutoff for small apparently is a 1000.\n\nHow would you feel about replacing \"k\" with \"K\"? Altogether?\n\nIf we support both we should probably fmt one into the other.",
      "parentUuid": "ba6577c7_8adecc53",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3412ec6_867e5f17",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 302,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Yes, I think dropping \"k\" for \"K\" is fine. SI be damned.\n\nI made the change.",
      "parentUuid": "15705110_54a0578a",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f10b3184_a22395ed",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Hmmm. I meant to remove this section altogether. Raw strings have been removed as wanted to give it a bit more thought. The Go one has some unfortunate limitations. I plan to use Swift 5-style raw strings instead.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea0d36c1_f1feae93",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f10b3184_a22395ed",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "164dd9e7_9d23c3b0",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 362,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T20:41:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ea0d36c1_f1feae93",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ca278caf_46a51663",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 582,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T18:36:45Z",
      "side": 1,
      "message": "always strings.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "319f6acc_4ee5ffb3",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 582,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T20:41:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca278caf_46a51663",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "91fcf45b_cea9756c",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 582,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "ca278caf_46a51663",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "104ceb37_310c5d79",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 616,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T18:36:45Z",
      "side": 1,
      "message": "arguably. Doesn\u0027t matter for the model either way.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4cd42be9_cd87c237",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 616,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "104ceb37_310c5d79",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "428c08ab_e68d05b9",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 617,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Good point, will replace by 42.0.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d3d55b70_45140a0a",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 617,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "428c08ab_e68d05b9",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9c24bee_820448ce",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 617,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Done.",
      "parentUuid": "d3d55b70_45140a0a",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "caa09a36_44a3d2e5",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 645,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T18:36:45Z",
      "side": 1,
      "message": "Yeah. So just calling it value is nicer. Dropping it.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c476b7ee_edcf9fd3",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 645,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Will let you make the change, since it\u0027s pervasive.",
      "parentUuid": "caa09a36_44a3d2e5",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7f06d417_f36d1fdb",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 712,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Yes. Default values are quite disruptive to the logical simplicity. But it is crucial to have and looking at other languages (logic programming, non-unification constrained-based languages, etc.) I haven\u0027t found anything better.\n\nDefaults also allow for null-coalescing, which is something that is at least very nice to be able to do and which would break the formalism analogously.\n\nIn the end defaults are the best compromise I could find.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6af846a4_5f37c8d7",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 712,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "As I mention in my comment in coalesce.md, I don\u0027t see why bottom-coalescing is a special feature. bottom | x \u003d\u003d x for any x.",
      "parentUuid": "7f06d417_f36d1fdb",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "082e20e3_1eca1de5",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 712,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "It is not special, as it follows from the disjunctions definition. It may just not be obvious to users that one can use this to provide default values for failed lookups, as in \nfoo[\"non-existing\"] | 5 is 5.",
      "parentUuid": "6af846a4_5f37c8d7",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ec5088aa_e1e7dc3f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 712,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "082e20e3_1eca1de5",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1eb4ba5f_44909230",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 749,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T18:36:45Z",
      "side": 1,
      "message": "CUE will always evaluate the unification of all values defined for a field.\n\nSo after compilation, your example is:\n\na: (1 | int) \u0026 2 \u003d\u003e \na: 1 \u0026 2 | int \u0026 2 \u003d\u003e\na: _|_ | 2 \u003d\u003e\na: 2\n\nonly after this is completed will the value of a be chosen, so in this case always 2.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bb76f289_1cfe5cd1",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 749,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "That is what I\u0027d expect, but the wording makes it unclear.",
      "parentUuid": "1eb4ba5f_44909230",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "48d6cd04_ffb42ce5",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 749,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-22T14:43:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "bb76f289_1cfe5cd1",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "84e52fec_79dd7f2c",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 752,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T18:36:45Z",
      "side": 1,
      "message": "Disjunctions are not evaluated when they are just a field value, only if used.\nAnd all values defined for a field are unified before the value for a field is computed.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9186abe5_6f72dc15",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 752,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "84e52fec_79dd7f2c",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5aa7826_ed380b03",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 766,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T18:36:45Z",
      "side": 1,
      "message": "All defaults are selected locally after evaluating all values assigned to a field. There is no backtracking ala Prolog. Any order of evaluation will always result in the same defaults being picked. In this case, this means conflict. In this case, evaluating in arbitrary order:\n\nc: (a + b) \u0026 4 \u003d\u003e\nc: 4 // punt a + b \u003d\u003d 4 as assertion (an internal concept) This trick allows cycle breaking\n     // note that a valid configuration can only exist if c is 4 as there is an error otherwise.\na: 1 | int \u003d\u003e\nb: 2 | int \u003d\u003e\nevaluate internal assertions:\na + b \u003d\u003d 4\n// select 1 for a and 2 for b as default.\n1 + 2 \u003d\u003d 4\n3 \u003d\u003d 4\n_|_",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "64a8f652_91649bb9",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 766,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "That all sounds good to me (although I don\u0027t know what \"locally\" means). But it\u0027s not clear from the spec. That\u0027s a particular problem since some traditional constraint languages could come up with solutions for this set of constraints. (I mean the problem is in the specification of the behavior -- I think your behavior is a better choice for this application.)",
      "parentUuid": "d5aa7826_ed380b03",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "22e94e79_ae8485ad",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 766,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-22T14:43:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "64a8f652_91649bb9",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "439a0a67_ca181187",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 788,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T18:36:45Z",
      "side": 1,
      "message": "Yeah that is why I explicitly labeled the column with Default and not value. This table is different from the other tables.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "860467d3_279b34ea",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 788,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "The last line of the table makes no sense, because the expression in the first column doesn\u0027t evaluate to a disjunction, so it\u0027s meaningless to talk about its default value.\n\nHow about this formulation:\n\n- If an expression is a disjunction, its default value is its first value.\n\n- If the expression is the unification of disjunctions, and the unification `d` of the first values of those disjunctions is not bottom, then the expression\u0027s default value is `d`.\n\n- Otherwise, the expression does not have a default value.\n\nIf you\u0027re willing to equate \"has no default value\" with \"has a default value of bottom,\" you can simplify the middle clause.",
      "parentUuid": "439a0a67_ca181187",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db3f9263_30a1e486",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 788,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-22T14:43:45Z",
      "side": 1,
      "message": "Getting there, although this definition is still not so clear, as we need the \"first value\", after eliminating impossible combinations. I have an idea I will send in a different CL",
      "parentUuid": "860467d3_279b34ea",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d03b0b3f_f5859b60",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 883,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T20:41:21Z",
      "side": 1,
      "message": "CUE would not attempt to solve such expressions (though the APIs allow solvers to augment or solve configurations). But granted, such tools would need to annotate infinity.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "4f93036b_e11f87cd",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 883,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-22T14:43:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "d03b0b3f_f5859b60",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "4832b7df_03a010e6",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 921,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Correct. I changed the definition and forgot to remove the old one. Will update. It\u0027s the length of the byte sequence now.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "836c6204_6593583e",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 921,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "4832b7df_03a010e6",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9146d09_7d2023b0",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 921,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T20:41:21Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "836c6204_6593583e",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "af03dd51_100cf326",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 942,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "The issue is if one writes: 3..4.0. In this case the set of values is {x | x in float and x \u003e\u003d 3.0 and x \u003c\u003d 4.0 }, because (int | float) \u0026 float \u003d\u003d float.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c067380e_81800f79",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 942,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "I understand that, I just object to the wording. You write:\n\n    The type of range is ...\n    Note that this may be more than one type.\n\n\"The\" implies one.\n\nYou\u0027re thinking of the case 3..4, where the type is int | float. That is one type, but two defined types.",
      "parentUuid": "af03dd51_100cf326",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "25ef0156_0d7314d9",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 942,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "Got it. will reword.",
      "parentUuid": "c067380e_81800f79",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b03a20f0_96848121",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 942,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T20:41:21Z",
      "side": 1,
      "message": "Considerably reworded and simplified it.",
      "parentUuid": "25ef0156_0d7314d9",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b70193e4_5f3a9cbb",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 942,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "25ef0156_0d7314d9",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a1284ee5_67dd8832",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 968,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "There are multiple normal forms. Hence respective. Maybe \"namesake Unicode normal form\"?",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b717cd5f_c5a442c1",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 968,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "I\u0027m still confused. You write NFC(a) as if NFC were a function. If it\u0027s not a function, what do your inequalities mean? And I guess I don\u0027t understand what \"respective\" is referring to. Can you elaborate?",
      "parentUuid": "a1284ee5_67dd8832",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5486d00d_0761306f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 968,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "I\u0027m using NFC here as a function converting a string to NFC.\n\nMy problem was \"the Unicode normal form of `x`\". There is not one Unicode normal form (there are many multiple). I can rephrase it, though.",
      "parentUuid": "b717cd5f_c5a442c1",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "0a1b10d0_eadcdab2",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 968,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5486d00d_0761306f",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "03c43606_77931009",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 976,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "That is confusing, though. Syntactically, a struct may have multiple fields with the same label.\nMaybe remove the sentence altogether?",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bf68f543_08a60bc3",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 976,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "03c43606_77931009",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d821374a_289a1f9a",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 983,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "I like that. In the formal definition I like to stick a bit closer to the notation used in literature, but here this is better indeed.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08e9df54_6e6c2e22",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 983,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d821374a_289a1f9a",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5c2a2325_cd3c0951",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 995,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "The latter. The meaning of unification of structs follows from the definition of unification and the subsumption relation on structs.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7b27544d_213736f1",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 995,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Right, so the word \"defined\" is inappropriate in this sentence. Changed it.",
      "parentUuid": "5c2a2325_cd3c0951",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "421ede22_f5e70cc5",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 995,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7b27544d_213736f1",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "cd98e0f8_3b0a2ef5",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1000,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "I like yours better.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "496c04dd_e8d04b4c",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1000,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "cd98e0f8_3b0a2ef5",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d3a2c459_835e1658",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1022,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Oops. I removed this from the spec, but I see I removed this from the wrong client and thus didn\u0027t make it in.\n\nIn the new definition it may only be a string, but including interpolated strings.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "154e64fc_2610eb67",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1022,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d3a2c459_835e1658",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f445ab78_c0768c47",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1101,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "I\u0027ve removed the tag definition for now. It is not yet implemented and I\u0027m not sure how it should look like.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1e8edd66_f1dd7e25",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1101,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f445ab78_c0768c47",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "3305a386_1705d5d7",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1161,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "No. This is more to show that we do not need to introduce a special formalism to handle lists.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "349c0ae5_1aa7c658",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1161,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "You should clarify. Don\u0027t use the word \"definition\", instead use phrases like \"can be thought of as\" and explicitly disavow the identity. E.g. Elem and Tail aren\u0027t special, len behaves differently, etc.",
      "parentUuid": "3305a386_1705d5d7",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3ae288b0_35ef406b",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1161,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "349c0ae5_1aa7c658",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a50cb472_39466554",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1161,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3ae288b0_35ef406b",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e557b125_455701c1",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1184,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Functions should have been removed from the spec. I had them as an option for a while, but now complete removed them, except within the implementation where they are used to implement templates as comprehensions.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "42d18cb4_3e6b4262",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1184,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e557b125_455701c1",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8af4c179_2db79a7e",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1185,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "The package refers to the package referred to by an ImportDecl.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "19bd2d17_67552663",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1185,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8af4c179_2db79a7e",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "41266719_cc2f181f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1210,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Functions are gone from the language.\n\nFunctions are problematic in configuration languages as they are non-orthogonal with structs. There was a user report from the Kubernetes team explaining how functions may lead to poor design (functions are often used to generate structs. This pattern is almost always wrong. The designer has to pick which fields are used to generate the struct, disallowing the user to make any changes. This often results in a too narrow set, requiring first to create the template, then modify it, etc. This maybe less of an issue in CUE as concrete fields cannot be modified anyway.)\n\nNote that a function can be constructed with a struct:\nsquare: {\n  in:  int | float\n  out: in * in\n}\n\nres: square{in: 4}.out // 16\n\nThis is awkward, of course, but it avoids the issues referred to in the k8s doc. We can make this less awkward, by generalizing emit values:\n\nsquare: {\n  in: int | float\n\n  in * in // the emitted value\n}\n\nres: square{in: 4} // 16 when emitting the config.\n\nGeneralizing emit values also opens up a possibility to introduce attribute in a way that CUE becomes more pleasant to use to generate XML.\n\nThen, lambdas were introduced in BCL to (locally) avoid repetition of some more complicated expressions.\nBut in CUE one can use aliases for that.\n\nAnyway, given all the badness that ensues from functions and given the available alternatives, I decided to remove them.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2ef79cb9_d53eb823",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1210,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Glad functions are gone.\n\nI don\u0027t like the generalized emit values--too much sugar. I don\u0027t think it\u0027s so bad to write foo{...}.out. It is clear and generalizes to multiple \"return values\".",
      "parentUuid": "41266719_cc2f181f",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b62a2c50_fd3f81c3",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1210,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "I\u0027m not in a rush with the emit values. It may solve a bunch of issues, but there should be some evidence it is worth it. \n\nIdeally I would also remove the top-level emit. But that makes CUE no longer a superset of JSON and I lose the property I can represent values other than objects/structs.",
      "parentUuid": "2ef79cb9_d53eb823",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "734c1c14_ea996b9f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1210,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b62a2c50_fd3f81c3",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e63c2c09_b951615d",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1302,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "No longer applicable. Functions are completely removed. Also did that in the wrong version I see now.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d49d3f12_a582d179",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1302,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e63c2c09_b951615d",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c9fd405b_cf88736f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1326,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "They must be concrete.\n\nThere is one detail I haven\u0027t worked out yet. If they are not concrete, do I just not evaluate the values or is it an error? Clearly it is an error when emitted, but what about\n\nint * int | 4\n\nShould the answer be int * int or 4? 4, I would say, but then we must be very precise as to when default values are chosen (without default values all of this would be trivial).\n\nI think the current implementation has it right, except for cycles.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a83b839c_cf07d31e",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1326,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "I would say:\n- If the answer is the same for all instances, evaluate to that answer.\n   E.g.\n          5 \u003c 6..8  \u003d\u003e true\n          int * 0 \u003d\u003e 0\n- If the answer is not the same for all instances, and you can never get more info (via defaulting), then evaluate to bottom.\n   E.g.\n          5 \u003c 3..8 \u003d\u003e _|_\n- If defaulting will make all values concrete, keep it as a constraint.\n  E.g.\n         a: 4 | 3..8 \n         5 \u003c a",
      "parentUuid": "c9fd405b_cf88736f",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d1c6700c_f2119bdd",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1326,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-22T14:43:45Z",
      "side": 1,
      "message": "Expressions are only evaluated once the field is evaluated. Until then, we just accumulate a list of expressions that needs to be unified during evaluation. The only modification is that references to nodes are replaced (dereferenced in jargon) to their new copy, if applicable (mentioned in the spec.) This implies the last condition already.\n\nOriginally I implemented your suggestion, but it makes the documentation a bit tricky. For instance, we now define ranges to be (a possible infinite set of) disjunctions of values, (without a valid default). I quite like this definition. But we also say defaults are chosen when not involved in an expression.\n\nAlso, where does it stop? 2..3 + 4 \u003d\u003d 6..7? -1..1 - -2..2 \u003d\u003d -3..3? Then what about 0..3 / 0..5 (if they are really disjunctions it gets very interesting)? !bool \u003d\u003d bool?\nIt seems to get quite messy. So I reverted to just not allowing it.\n\nIf the conditions under which it is allowed can be written down cleanly, it is worth considering though.",
      "parentUuid": "a83b839c_cf07d31e",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "93bbe280_64217c52",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1326,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-23T11:13:38Z",
      "side": 1,
      "message": "Agreed, it\u0027s simpler to disallow interval arithmetic and the like.",
      "parentUuid": "d1c6700c_f2119bdd",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f68986ac_a3bda4ca",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1432,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "also. Bytes were added later and I missed updating this.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f81b9577_d8565d4f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1432,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f68986ac_a3bda4ca",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5af9388d_7069e97b",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1441,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T20:41:21Z",
      "side": 1,
      "message": "It must be a concrete value, but the default value is chosen if there is one.\nIf the result is still not concrete, or there is no default, it is an error.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7237b85e_da54540e",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1441,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-23T11:13:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5af9388d_7069e97b",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd1c4a21_c2163b65",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1455,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "It still returns the entire grapheme cluster.\nCUE strings are based on Swift strings, both in syntax and semantics.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b9b83c07_9cf1af01",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1455,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "OK, but you\u0027ll have to explain all that here (and/or refer to the swift doc).",
      "parentUuid": "fd1c4a21_c2163b65",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fc3ee190_d446443a",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1455,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-22T14:43:45Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "b9b83c07_9cf1af01",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a160de3f_8491f1b3",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1486,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Yes.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "ea7fab46_cd444ef1",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1486,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a160de3f_8491f1b3",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f97fd147_2eaead44",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1698,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "I don\u0027t know what it means, unless we close it before multiplication. This would argue that indexing/slicing a list closes it before performing the operation (which is also consistent with the manifestation of the indexing values).",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "a7afa7b1_4e99eea7",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1698,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f97fd147_2eaead44",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "9af35b18_eff4b9d3",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1729,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "I should probably disallow this. It is inconsistent with the manifestation rules for number expressions. This is a leftover from before the existence of open lists.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "6183e661_3e07e080",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1729,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "9af35b18_eff4b9d3",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f7d5c919_34353da4",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1739,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Yes, that is an error (the first null should go).\n\nI may consider not allowing ranges here, though, as it makes the story about binary expressions more consistent.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fdd941f4_291bfa8f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1739,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f7d5c919_34353da4",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a343b55_7a949da1",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1804,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "It should either mean _|_ or 3 \u003c 1..5. Either would result in an error when converting to JSON or manifesting otherwise. The difference is relevant when evaluating disjunctions of structs containing such values. I think it should be _|_. Until this is clear, or even regardless, it should probably be an error to have a disjunction of structs where a struct field has such a unevaluatable value.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8df73676_c80340b8",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1804,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Agreed.",
      "parentUuid": "7a343b55_7a949da1",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5874597b_1a6b4b34",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1866,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "correct",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "31b39270_76bc13e8",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1866,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "OK, then I removed the mention of type.",
      "parentUuid": "5874597b_1a6b4b34",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "50e6c67a_8f0083ce",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1866,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "31b39270_76bc13e8",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a7ee3026_a147bd7e",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1877,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "oops, there are none.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "24f0bae2_f2cf91e1",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1877,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "a7ee3026_a147bd7e",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b7e9eccf_0116e4b4",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1937,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Yes, good idea.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "c68521fa_f5fb6057",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1937,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "b7e9eccf_0116e4b4",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "340786c0_1671b241",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1992,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "I don\u0027t have to. The result of unifying two values where a is an instance of b is a itself.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f71b5bed_2fe7cccd",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1992,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "I don\u0027t understand your reply. \nI only know three things about T(x) for structs:\n\n0. The result must be an instance of T (from the beginning of the Conversions section)\n1 \u0026 2: the two statements so numbered just above.\n\nFrom these many possible results for T(x) follow. E.g. T(x).f could be x.f.\n\nWhat part of the spec implies that T(x).f is T.f \u0026 x.f?",
      "parentUuid": "340786c0_1671b241",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9e2ea2dc_2566e3a6",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1992,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "If T and x both have an f, it must follow from rule 1 that T.f subsumes x.f (x.f is an instance of T.f). The result of unifying x.f and T.f in that case is x.f, as the unifying a value with an instance of that value is always the instance of that value.\n\nOr, if t.F \u0026 x.f were not x.f, then x.f is not an instance of t.F (inclusive) and would violate rule 1.\n\nYou would be right if x were allowed to be unifiable with T without being an instance of T, but this is not how it is defined now.",
      "parentUuid": "f71b5bed_2fe7cccd",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "437c8a3d_b860300a",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1992,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Of course, I see now.",
      "parentUuid": "9e2ea2dc_2566e3a6",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2b889468_914840e5",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 1992,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-22T10:14:12Z",
      "side": 1,
      "message": "One more note to explain why it is defined this way:\nTL;DR: it allows conversion to act as an additional type check.\n\nIt is also consistent with CUE\u0027s approach. In BCL and descendants, templates are for reducing boilerplate. In TFS systems, constraints are for reducing boiler plate AND for type checking. This definition of type conversion is likely to catch when a wrong value is passed to it.",
      "parentUuid": "437c8a3d_b860300a",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "5e92f955_94a1951d",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2123,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "This is correct.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "55348080_d5c8d03f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2123,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "5e92f955_94a1951d",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "644e644e_a05cae25",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2124,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "2: manifest to a concrete value and evaluate.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "359a345b_69af1f35",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2124,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Requires doc.",
      "parentUuid": "644e644e_a05cae25",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "844eb028_3c8a2471",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2124,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "359a345b_69af1f35",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ed3eb7b0_dc448bc5",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2125,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "No. Tail: null does not count as an element. One can define this as one wants.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f2d2a2ad_f79ebd3e",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2125,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "ed3eb7b0_dc448bc5",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a9c57c3e_d34efa59",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2186,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Good point. It indeed can be removed.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5845715a_5b830610",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2186,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "a9c57c3e_d34efa59",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "0a14827d_573dccea",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2197,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "This allows templates and constraints to be defined at different levels of scope, e.g. organization wide, sub-org, team, project, etc., where each subdirectory specifies more stringent constraints. This pattern of organizing configurations seems to come up a lot.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "39d0ce51_e0eb1ae7",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2197,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "I noticed that\n\n _base label component: \"XYZ\"\n\nappears in multiple files in the kube package, and I was wondering why they didn\u0027t all unify together to _|_. Do \"instances\" explain that? If so, they seems to be a way to have your inheritance cake and eat it too. But it\u0027s an obscure mechanism to me. I guess that if you load some files into a cue process and not others, then you don\u0027t see certain declarations, so they don\u0027t contradict each other -- maybe that\u0027s all this is. But it\u0027s hard to see from the files themselves what\u0027s going on.\n\nWhat would happen if you combined instance and package? A package is a set of files in a directory (like Go), and the fundamental operation is evaluating and emitting one package. That package may import others, and define values in it. So package \"kitchen\" imports \"kubebase\" and defines \n\n   kubebase._base label component: \"kitchen\"\n\nThat doesn\u0027t contradict with package \"frontend\" defining that field to be a different value, as long as you don\u0027t \"kitchen\" doesn\u0027t depend on \"frontend\" or vice versa.",
      "parentUuid": "0a14827d_573dccea",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "11993928_6a0fe02f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2197,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-22T14:43:45Z",
      "side": 1,
      "message": "Well spotted. :) \n\nThe CUE spec is like the Go spec, in that it explains packages (and instances), but does not say how a tool should organize it. The Go tool defines packages, but does not define they all belong to the same directory. Similarly, CUE defines how to mark a file belonging to a package, but does not specify how this should be organized.\n\nUnifying all files in the package clearly results in evaluation errors. However, CUE evaluation is done per instance (directory plus ancestor directories), which is a subset of the files defined by the tool. You should not see conflicting values within an instance.\n\nRemember how CUE/TFS constraints are intended for removing boilerplate as well as enforcement. This is carried through to the directory layout, analogously to ACLs: parent directories specify constraints that apply to all its subdirectories. This allows one to enforce a standard for an entire org, and allows orgs to set standards for suborgs, etc. For instance, I can enforce a certain standard for the use of a specific port or url for exporting metrics. I think this is a very useful property.\n\nLike Go, though, the CUE language spec leaves the details of the organization up to the tooling.\nSome possibilities:\n- include it in the spec (rather not)\n- include it as an example implementation with motivation in the spec\n- find another approach with similar properties (preferably also not using imports)\n\nI note that organizing configurations this way seems to be a common pattern.\n\nI think this setup doesn\u0027t share the bad properties of overlay systems like Kustomize or HCL. There is no \"inheritance cake\". There is no overwriting of values. If you include too few files, you have an error for underspecification. If you select too many, you will have a conflict.\n\nThat said, there is one place where there is a bit of finagling: the scripting layer (not part of the CUE spec). The cue tool allows defining commands on configurations (in *_tool.cue files). In many cases it is useful to consider all instances selected on the command line as one configuration. For the kubernetes tutorial, for instance, the result of all instances combined should be all Kubernetes objects of the instances to a unique namespace.\n\nFor this purpose, the cue command line tool has a unified view obtained by:\n1. fully evaluating every instance individually as defined by the CUE spec (fully checked for errors)\n2. removing the templates from the structs of these instances \n   (alternatively one could combine 1 and 2 and say that instances are evaluated to\n   their concrete values.)\n3. unifying all these instances at its root.\n4. disable proactive error checking and only check errors for the part of the resulting configuration used by the commands\n\nSo in this scenario, the labels you mention will fail to evaluate. However, as long as the command will not refer to them, it will not result in a failure. All I care about is that the result of unifying Kubernetes objects of all instances unify into a consistent whole. The failures I do run in to are failures I really want to know about, but would not easily get if there were no unified view. \n\nIn any case, in none of these scenarios will I rely on overwriting, the order of evaluation will still not matter, and it gives me a relatively easy way to enforce org-wide consistency.\n\nI could make this merged view in the scripting layer an opt-in feature, though my experience is that writing tools is more awkward that way. A viable alternative could be to make each instance available to the tools and provide a package to for explicit merging of instances.",
      "parentUuid": "39d0ce51_e0eb1ae7",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "08e6900c_2a32e55f",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2197,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-23T11:13:38Z",
      "side": 1,
      "message": "OK, thanks for explaining.",
      "parentUuid": "11993928_6a0fe02f",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7171026b_ffc0b5d7",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2223,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "It is very useful in one particular, but probably very common case:\n\nCUE files can be classified in three categories: 1) templates for existing systems (very general, data types), 2) \"model files\" which define nice abstractions and ways to convert concrete instances of such abstractions to be instances of the templates of category 1, and 3) users creating concrete instances of such abstractions.\n\n1 can be generated from code. 2 will typically be written once and then used by many, 3 is what the majority of the people will be writing.\n\nThe \".\" import is very useful for importing model files.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2c489b76_c94f0989",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2223,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "7171026b_ffc0b5d7",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "7a47ffe1_fd60ae71",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2327,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "The issue is that on the one hand I want to make the spec understandable for people not familiar with the formalism, while on the other hand I want to relate it to what is available in the literature. This formalism has 35 years of research backing it. Specifying it in terms of the above style will make it very hard to relate such research to CUE. On the other hand, specifying the entire spec in terms of this formalism will make it hard for people not familiar with this formalism to read it.\n\nAnyway, this was my reasoning. Please let me know if you still it should be approached differently.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b40f29ee_368ca5a3",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2327,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Have two docs. The spec should be like the Go spec, highly readable all the way through.",
      "parentUuid": "7a47ffe1_fd60ae71",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "05e169ed_d86c341b",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2327,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "Makes sense. Hadn\u0027t thought about that before. I\u0027ll first do a first round of updates and fixes and then split the docs.",
      "parentUuid": "b40f29ee_368ca5a3",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e052cc9f_eb77d2a0",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2327,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-23T11:13:38Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "05e169ed_d86c341b",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "b2a30c0e_6cc0d8de",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2532,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Most TFS/GU formalisms don\u0027t have expressions and are purely symbolic (although some allow n-ary operators). They also typically don\u0027t have references (although they allow binding nodes). The constraint functions allow me to relate CUE to existing formalisms. For instance, even though CUE was inspired by and modeled after the TFS formalisms described by Bob Carpenter and Ann Copestake, it took me a while to realize that, despite large superficial differences, CUE is in fact almost entirely identical except for a few small differences. These differences, in turn, helps one understand which of the existing graph unification one could use for CUE or what adaptions they would need.\n\nThis is not just a matter of simple features. These algorithms are often very subtle and cunning wrt cycle detection, optimization, etc. but they also are very peculiar limitations for which one needs to understand very precisely what is going on.\n\nI could maybe move this stuff to a separate document on implementing CUE.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "9b25bddf_07c1d35b",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2532,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Yes, that was my point, it seems like an implementation detail. I do recommend a separate doc for that.",
      "parentUuid": "b2a30c0e_6cc0d8de",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "78ca61a6_71bb84ad",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2572,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "correct. Working on this at the moment.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e670acb8_0b2f6fd0",
        "filename": "doc/ref/spec.md",
        "patchSetId": 4
      },
      "lineNbr": 2572,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "78ca61a6_71bb84ad",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1340251c_9b5829d9",
        "filename": "doc/tutorial/basics/aliases.md",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "You change does not make it entirely clear to me that the following isn\u0027t possible:\n\na: { B \u003d 4 }\n\nb: a.B // not possible",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e47e1ce4_13ca3a6e",
        "filename": "doc/tutorial/basics/aliases.md",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "But *your* version has the opposite problem: if they \"cannot be accessed,\" then how can you refer to them at all?\n\nMaybe \"cannot be accessed outside the struct\"?",
      "parentUuid": "1340251c_9b5829d9",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3c25104b_89a1f3e5",
        "filename": "doc/tutorial/basics/aliases.md",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "I like that wording.",
      "parentUuid": "e47e1ce4_13ca3a6e",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "18e83394_e1592f20",
        "filename": "doc/tutorial/basics/aliases.md",
        "patchSetId": 4
      },
      "lineNbr": 12,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "I did something similar.",
      "parentUuid": "3c25104b_89a1f3e5",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "13d99118_1482144f",
        "filename": "doc/tutorial/basics/bytes.md",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Yes, this is a typo.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "8252eca0_2bcc83d8",
        "filename": "doc/tutorial/basics/bytes.md",
        "patchSetId": 4
      },
      "lineNbr": 14,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "13d99118_1482144f",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "e54dc7bc_ccd1c5c2",
        "filename": "doc/tutorial/basics/emit.md",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Good point. The syntax is, but the semantics isn\u0027t.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e24d719e_7a1498b8",
        "filename": "doc/tutorial/basics/emit.md",
        "patchSetId": 4
      },
      "lineNbr": 11,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e54dc7bc_ccd1c5c2",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c464a78e_d3ceab8e",
        "filename": "doc/tutorial/basics/ranges.md",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "indeed\n\nOne open issue: because I use decimal floats, the number of decimals is preserved. So 3.00 in the input appears as 3.00 in the output. But it gets tricky if the number of decimals is 0. In that case I could show either \"3.0\" anyway or perhaps \"3.\" or \"float(3)\" to disambiguate.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "3468d347_dc19b6a1",
        "filename": "doc/tutorial/basics/ranges.md",
        "patchSetId": 4
      },
      "lineNbr": 38,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "I think either 3.  or float(3) is OK.",
      "parentUuid": "c464a78e_d3ceab8e",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fe7faed6_f26919a9",
        "filename": "doc/tutorial/kubernetes/manual/services/cloud.cue",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Name gets bound to the field name and thus is a concrete string \"| string\" allows users to override the value with any string.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "bd953dab_a26ec023",
        "filename": "doc/tutorial/kubernetes/manual/services/cloud.cue",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "OK, I think I see. So with\n   deployment \u003cName\u003e : { name: Name }\nif I write\n   d: deployment foo\nmy result can only be\n   d: { name: \"foo\" }\n\nBut if I use\n   deployment \u003cName\u003e : { name: Name | string}\nthen I can write\n   d: deployment foo\nand then \n   e: d \u0026 {name: \"bar\"}\nand then e.name \u003d\u003d \"bar\"?\n\nSo this lets me \"copy\" an existing deployment and change its name?",
      "parentUuid": "fe7faed6_f26919a9",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "db85eb22_7871f30f",
        "filename": "doc/tutorial/kubernetes/manual/services/cloud.cue",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T16:34:58Z",
      "side": 1,
      "message": "Rewriting your example to be correct:\n\nSo with\n   deployment \u003cName\u003e : { name: Name }\nif I write\n   deployment foo\nmy result can only be\n   deployment foo: { name: \"foo\" }\n\nBut if I use\n   deployment \u003cName\u003e : { name: Name | string}\nthen I can write\n   deployment foo: { name: \"bar\" } foo.name will have value \"bar\"\n\nAs disjunctions are evaluated lazily, I could also write\n   deployment baz: {} // baz.name will have value \"baz\" | string\nand then\n   e: deployment.baz \u0026 { name: \"goo\" }\nand then e.name \u003d\u003d \"goo\"?\n\nSo to your last question: yes, I guess, although that is not the specific point. The templates define a value that gets unified with all sibling members, binding a sibling\u0027s field name to the template identifier in each case.\n\nTemplates define types (to be unified with values) for undefined struct fields, analogous to how the type for the elements of an open list constrains the types for the remaining elements.",
      "parentUuid": "bd953dab_a26ec023",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "cfbd29c9_1209ee11",
        "filename": "doc/tutorial/kubernetes/manual/services/cloud.cue",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T21:18:50Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "db85eb22_7871f30f",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d5ff3606_7ffa82cc",
        "filename": "doc/tutorial/kubernetes/manual/services/cloud.cue",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "Port is the default value, but the user may specify another integer in any struct that unifies with this service definition.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "7836a6b0_a6018560",
        "filename": "doc/tutorial/kubernetes/manual/services/cloud.cue",
        "patchSetId": 4
      },
      "lineNbr": 70,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "d5ff3606_7ffa82cc",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "964d7112_a9688026",
        "filename": "doc/tutorial/kubernetes/manual/services/cloud.cue",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1000001
      },
      "writtenOn": "2019-01-21T09:20:13Z",
      "side": 1,
      "message": "That is correct.",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "d7eb8826_1e5f9e22",
        "filename": "doc/tutorial/kubernetes/manual/services/cloud.cue",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1000003
      },
      "writtenOn": "2019-01-21T15:27:31Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "964d7112_a9688026",
      "revId": "872e632bcdfaffaa56a9b91fcd7a0c922064cad8",
      "serverId": "cf2d04e9-fd44-3a25-9e02-2b093b5119d7",
      "unresolved": false
    }
  ]
}